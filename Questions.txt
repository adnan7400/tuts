Q. What is polymorphism? What is static and dynamic polymorphism? What is the difference between method overloading and method overriding?

Overloading occurs when two or more methods in one class have the same method name but different parameters.
Overriding means having two methods with the same method name and parameters (i.e., method signature). One of the methods is in the parent class and the other is in the child class. Overriding allows a child class to provide a specific implementation of a method that is already provided its parent class.

2. Overriding vs. Overloading

Here are some important facts about Overriding and Overloading:

1). The real object type in the run-time, not the reference variable's type, determines which overridden method is used at runtime. In contrast, reference type determines which overloaded method will be used at compile time.
2). Polymorphism applies to overriding, not to overloading.
3). Overriding is a run-time concept while overloading is a compile-time concept.


Q. "Final" keyword in java?

If a variable is declared with the final keyword, its value cannot be changed once initialized. Note that the variable does not necessarily have to be initialized at the time of declaration. If it’s declared but not yet initialized, it’s called a blank final variable.

Final methods- A method, declared with the final keyword, cannot​ be overridden or hidden by subclasses.

Final classes - A class​ declared as a final class, cannot be subclassed

Q. OOP 

***Encapsulation - is achieved when each object keeps its state private, inside a class. Other objects don’t have direct access to this state. Instead, they can only call a list of public functions — called methods.

***Abstraction - Applying abstraction means that each object should only expose a high-level mechanism for using it.

This mechanism should hide internal implementation details. It should only reveal operations relevant for the other objects.

Think, a coffee machine. It does a lot of stuff and makes quirky noises under the hood. But all you have to do is put in coffee and press a button.

****Inheritance - Objects are often very similar. They share common logic. It means that you create a (child) class by deriving from another (parent) class. This way, we form a hierarchy.

The child class reuses all fields and methods of the parent class (common part) and can implement its own (unique part).

***Polymorphism - gives a way to use a class exactly like its parent so there’s no confusion with mixing types. But each child class keeps its own methods as they are.

This typically happens by defining a (parent) interface to be reused. It outlines a bunch of common methods. Then, each child class implements its own version of these methods.

*********Binary search - O(log n)

*****Linked List - Search by value - O(n), search by index - O(n), insert at tail/head - O(1), insert at middle - O(n)

Deletion - beginning - O(1), end - O(n), middle - O(n)

*****Arrays - In java and other languages, arrays are static. Their size must be allocated when we create them and that size cannot change. 

Dynamic arrays in Java are of two types, Vector and ArrayList. Vector grows by 100% of its size when it reaches its size limit, arraylist grows by 50% of its size when it reaches its size list.

All methods in the vector class are synchronized. When a method is synchronized only a single thread can access that method. If we have a multi threaded application where multiple threads are going to work with this collection, then we can't use the vector class and should use Arraylist class, because its methods are not synchronized. 



SQL

VIEW - In SQL, a view is a virtual table based on the result-set of an SQL statement.  The fields in a view are fields from one or more real tables in the database.

Q. What are SELECT statements in sql?
A- The SELECT statement is used to select data from a database. The data returned is stored in a result table, called the result-set.

